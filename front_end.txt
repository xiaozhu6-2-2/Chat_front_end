<!-- src/App.vue -->
<template>
  <div id="app">
    <router-view></router-view>
  </div>
</template>

<script>
export default {
  name: 'App'
}
</script>

<style>
/* 全局样式 */
</style>
// src/router/index.js
import { createRouter, createWebHistory } from 'vue-router'
import Login from '../components/LoginView.vue' // 登录组件路径
import Register from '../components/RegisterView.vue' // 注册组件路径
import ChatRoom from '../components/ChatRoom.vue' // 聊天室组件路径
import FriendView from '../components/FriendView.vue'
import FriendRequest from '@/components/FriendRequest.vue'
const routes = [
  {
    path: '/',
    name: 'Login',
    component: Login
  },
  {
    path: '/register',
    name: 'Register',
    component: Register
  },
  {
    path: '/chat',
    name: 'ChatRoom',
    component: ChatRoom
  },
  {
    path: '/friends',
    name: 'FriendView',
    component: FriendView
  },
  {
    path: '/friend-requests',
    name: 'FriendRequest',
    component: FriendRequest
  },
]

const router = createRouter({
  history: createWebHistory(process.env.BASE_URL),
  routes // short for `routes: routes`
})

export default router
<!-- src/components/RegisterView.vue -->
<template>
  <div class="register-container">
    <div class="register">
      <h1>用户注册</h1>

      <el-form
        :model="form"
        status-icon
        :rules="rules"
        ref="formRef"
        label-width="100px"
        class="demo-ruleForm"
      >
        <!-- 用户名 -->
        <el-form-item label="用户名" prop="account">
          <el-input v-model="form.account" autocomplete="off"></el-input>
        </el-form-item>

        <el-form-item label="昵称" prop="username">
          <el-input v-model="form.username" autocomplete="off"></el-input>
        </el-form-item>

        <!-- 密码 -->
        <el-form-item label="密码" prop="password">
          <el-input type="password" v-model="form.password" autocomplete="off"></el-input>
        </el-form-item>

        <!-- 确认密码 -->
        <el-form-item label="确认密码" prop="confirmPass">
          <el-input type="password" v-model="form.confirmPass" autocomplete="off"></el-input>
        </el-form-item>

        <!-- 提交按钮 -->
        <el-form-item class="button-group">
          <el-button type="primary" @click="submitForm" :loading="loading">注册</el-button>
          <el-button @click="resetForm">重置</el-button>
        </el-form-item>

        <!-- 跳转到登录页 -->
        <p class="tab-link">
          已有账号？
          <router-link to="/">去登录</router-link>
        </p>
      </el-form>

    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  name: 'RegisterView',
  data() {
    // 自定义验证：两次输入密码是否一致
    const validatePass = (rule, value, callback) => {
      if (value !== this.form.password) {
        callback(new Error('两次输入密码不一致'));
      } else {
        callback();
      }
    };

    return {
      loading: false,
      form: {
        account: '',
        password: '',
        confirmPass: '',
        username: ''
      },
      rules: {
        account: [
          { required: true, message: '请输入用户名', trigger: 'blur' },
          { min: 3, max: 15, message: '长度在3到15个字符之间', trigger: 'blur' }
        ],
        password: [
          { required: true, message: '请输入密码', trigger: 'blur' },
          { min: 6, message: '密码至少为6位', trigger: 'blur' }
        ],
        confirmPass: [
          { required: true, message: '请再次输入密码', trigger: 'blur' },
          { validator: validatePass, trigger: 'blur' }
        ],
        username: [
          { required: true, message: '请输入昵称', trigger: 'blur' },
          { min: 2, max: 30, message: '长度在2到30个字符之间', trigger: 'blur' }
        ]
      }
    };
  },
  methods: {
    submitForm() {
      this.$refs.formRef.validate(async (valid) => {
        if (valid) {
          this.loading = true;
          try {
            const response = await axios.post('http://127.0.0.1:3000/register', {
              account: this.form.account,
              password: this.form.password,
              username: this.form.username
            });

            if (response.data.success) {
              this.$message.success('注册成功');
              await this.$router.push('/');
            } else {
              this.$message.error(response.data.message || '注册失败');
            }
          } catch (error) {
            console.error(error);
            this.$message.error('网络请求失败，请稍后再试');
          } finally {
            this.loading = false;
          }
        } else {
          return false;
        }
      });
    },
    resetForm() {
      this.$refs.formRef.resetFields();
    }
  }
};
</script>

<style scoped>
.register-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #f5f7fa;
}

.register {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  max-width: 400px;
  padding: 40px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  background-color: white;
}

.demo-ruleForm {
  width: 100%;
}

.button-group {
  text-align: center;
  margin-left: 50px;
}

.tab-link {
  margin-top: 10px;
  text-align: center;
  font-size: 14px;
}
</style>
<!-- src/components/LoginView.vue -->
<template>
  <div class="login-container">
    <div class="login">
      <h1>用户登录</h1>

      <el-form
        :model="form"
        status-icon
        :rules="rules"
        ref="formRef"
        label-width="100px"
        class="demo-ruleForm"
      >
        <!-- 用户名 -->
        <el-form-item label="账号" prop="account">
          <el-input v-model="form.account" ></el-input>
        </el-form-item>

        <!-- 密码 -->
        <el-form-item label="密码" prop="password">
          <el-input type="password" v-model="form.password" ></el-input>
        </el-form-item>

        <!-- 提交按钮 -->
        <el-form-item class="button-group" >
          <el-button type="primary" @click="submitForm" :loading="loading">登录</el-button>
          <el-button @click="resetForm">重置</el-button>
        </el-form-item>

        <!-- 跳转到注册页 -->
        <p class="tab-link">
          没有账号？
          <router-link to="/register">去注册</router-link>
        </p>
      </el-form>

    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  name: 'LoginView',
  data() {
    return {
      loading: false,
      form: {
        account: '',
        password: ''
      },
      rules: {
        account: [
          { required: true, message: '请输入账号', trigger: 'blur' },
          { min: 3, max: 15, message: '长度在3到15个字符之间', trigger: 'blur' }
        ],
        password: [
          { required: true, message: '请输入密码', trigger: 'blur' },
          { min: 6, message: '密码至少为6位', trigger: 'blur' }
        ]
      }
    };
  },
  methods: {
    submitForm() {
      this.$refs.formRef.validate(async (valid) => {
        if (valid) {
          this.loading = true;
          try {
            const response = await axios.post('http://127.0.0.1:3000/login', {
              account: this.form.account,
              password: this.form.password
            });

            if (response.status === 200) {
              const data = response.data;
              localStorage.setItem('token', data.token);
              localStorage.setItem('account', this.form.account); 
              localStorage.setItem('username', data.username);
              this.$message.success('登录成功');
              await this.$router.push('/chat');
            } else {
              this.$message.error(response.data.message || '登录失败');
            }
          } catch (error) {
            console.error(error);
            this.$message.error('网络请求失败，请稍后再试');
          } finally {
            this.loading = false;
          }
        } else {
          return false;
        }
      });
    },
    resetForm() {
      this.$refs.formRef.resetFields();
    }
  }
};
</script>

<style scoped>
.login-container {
  display: flex;
  justify-content: center; /* 水平居中 */
  align-items: center; /* 垂直居中 */
  min-height: 100vh; /* 设置为视口高度 */
  background-color: #f5f7fa; 
}

.login {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  max-width: 400px; /* 控制最大宽度 */
  padding: 40px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1); 
  border-radius: 8px;
  background-color: white;
}

.demo-ruleForm {
  width: 100%; /* 确保表单填满父容器 */
}

.button-group {
  justify-content: center;
  margin-top: 20px;
  margin-left: 50px;
  width: 100%
}

.tab-link {
  text-align: center; /* 注册链接居中 */
  padding: auto;
}
</style>
<!-- src/components/FriendView.vue -->
<template>
  <div class="common-layout">
    <!-- 主体容器 -->
    <div class="main-content">
      <!-- 左侧好友列表 -->
      <div class="friend-list">
        <div class="header" style="display: flex; justify-content: center; align-items: center; margin-bottom: 20px">
          <h2>好友列表</h2>
        </div>

        <!-- 表格部分 - 添加固定高度避免布局抖动 -->
        <el-table 
          :data="friends" 
          style="width: 100%; min-height: 400px;"
          :row-class-name="tableRowClassName"
          v-loading="loading"
        >
          <el-table-column prop="username" label="用户名" />
          <el-table-column label="操作" width="120">
            <template #default="{ row }">
              <el-button 
                size="small" 
                type="danger" 
                plain
                @click="removeFriend(row.account)"
                icon="Delete"
              >删除</el-button>
            </template>
          </el-table-column>
        </el-table>
      </div>

      <!-- 右侧功能区 -->
      <div class="right-aside">
        <!-- 功能列表标题 -->
        <div style="margin-bottom: 20px; font-weight: bold; text-align: center; font-size: 18px;">功能列表</div>

        <!-- 添加好友区域 -->
        <div class="add-friend-section">
          <el-form :model="form" label-position="top">
            <el-form-item label="添加好友">
              <el-input 
                v-model="form.account" 
                placeholder="输入对方账号" 
                clearable
              />
            </el-form-item>
          </el-form>
          <el-button 
            type="primary" 
            @click="sendFriendRequest" 
            style="width: 100%"
            icon="Plus"
          >发送好友请求</el-button>
        </div>

        <!-- 其他功能按钮 -->
        <div class="other-functions">
          <div class="function-item">
            <el-button 
              @click="goToFriendRequests" 
              style="width: 100%"
              type="warning"
              icon="Bell"
            >查看通知</el-button>
          </div>
          <div class="function-item">
            <el-button 
              @click="goToChatRoom" 
              style="width: 100%"
              type="info"
              icon="Close"
            >退出好友列表</el-button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import axios from 'axios'
import { useRouter } from 'vue-router'
import { ElMessage, ElMessageBox } from 'element-plus'

const router = useRouter()

const friends = ref([])
const form = ref({
  account: ''
})
const loading = ref(false)

// 获取当前登录用户的好友列表
const fetchFriends = async () => {
  try {
    loading.value = true
    const token = localStorage.getItem('token')
    if (!token) {
      ElMessage.error('请先登录')
      router.push('/login')
      return
    }
    
    const response = await axios.get('http://127.0.0.1:3000/friends', {
      headers: { Authorization: `Bearer ${token}` }
    })
    
    // 确保返回的是数组
    friends.value = Array.isArray(response.data) ? response.data : []
  } catch (error) {
    console.error('获取好友列表失败:', error)
    ElMessage.error('获取好友列表失败')
  } finally {
    loading.value = false
  }
}

// 发送好友请求
const sendFriendRequest = async () => {
  const targetAccount = form.value.account.trim()
  if (!targetAccount) {
    ElMessage.warning('请输入对方账号')
    return
  }

  try {
    const token = localStorage.getItem('token')
    if (!token) {
      ElMessage.error('请先登录')
      router.push('/login')
      return
    }
    
    const response = await axios.post(
      'http://127.0.0.1:3000/friend-requests',
      { receiver_account: targetAccount },
      { headers: { Authorization: `Bearer ${token}` } }
    )
    
    if (response.data.success) {
      ElMessage.success('好友请求已发送')
      form.value.account = '' // 清空输入框
    } else {
      ElMessage.warning('发送好友请求失败')
    }
  } catch (error) {
    console.error('发送好友请求失败:', error)
    let errorMessage = '发送请求失败'
    if (error.response) {
      // 解析后端返回的错误信息
      errorMessage = error.response.data.message || errorMessage
    }
    ElMessage.error(errorMessage)
  }
}

// 删除好友
const removeFriend = async (friendAccount) => {
  try {
    const token = localStorage.getItem('token')
    if (!token) {
      ElMessage.error('请先登录')
      router.push('/login')
      return
    }
    
    // 使用平滑过渡效果避免抖动
    const table = document.querySelector('.el-table__body-wrapper')
    if (table) {
      table.style.transition = 'all 0.3s ease'
      table.style.transform = 'translateY(0)'
    }
    
    // 确认操作
    await ElMessageBox.confirm(
      `确定要删除好友 ${friendAccount} 吗？`,
      '删除好友',
      {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning',
        customClass: 'confirm-dialog', // 添加自定义类名用于样式控制
        beforeClose: (action, instance, done) => {
          // 对话框关闭前添加过渡效果
          if (action === 'confirm') {
            if (table) {
              table.style.transform = 'translateY(10px)'
              setTimeout(done, 100)
            } else {
              done()
            }
          } else {
            done()
          }
        }
      }
    )
    
    const response = await axios.delete(
      `http://127.0.0.1:3000/friends/${friendAccount}`, 
      { headers: { Authorization: `Bearer ${token}` } }
    )
    
    if (response.data.success) {
      ElMessage.success('好友删除成功')
      await fetchFriends() // 刷新列表
    } else {
      ElMessage.warning('删除好友失败')
    }
  } catch (error) {
    console.error('删除好友失败:', error)
    if (error !== 'cancel') { // 用户点击取消不提示错误
      ElMessage.error('删除好友失败')
    }
  } finally {
    // 重置过渡效果
    const table = document.querySelector('.el-table__body-wrapper')
    if (table) {
      table.style.transition = ''
      table.style.transform = ''
    }
  }
}

// 表格行样式 - 添加平滑过渡效果
const tableRowClassName = ({ rowIndex }) => {
  if (rowIndex % 2 === 0) {
    return 'even-row'
  } else {
    return 'odd-row'
  }
}

// 路由跳转：去聊天室
const goToChatRoom = () => {
  router.push('/chat')
}

// 路由跳转：查看通知
const goToFriendRequests = () => {
  router.push('/friend-requests')
}

// 页面加载时获取数据
onMounted(async () => {
  await fetchFriends()
})
</script>

<style scoped>
.common-layout {
  display: flex;
  min-height: 100vh;
  background-color: #f5f7fa;
  overflow: hidden; /* 防止滚动条变化导致抖动 */
}

.main-content {
  display: flex;
  flex: 1;
  overflow: hidden;
  margin: 20px;
  background: white;
  border-radius: 8px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease; /* 添加过渡效果 */
}

.friend-list {
  flex: 1;
  padding: 20px;
  box-sizing: border-box;
  overflow-y: auto;
}

.right-aside {
  width: 300px;
  background-color: #f9f9f9;
  padding: 20px;
  box-sizing: border-box;
  border-left: 1px solid #ebeef5;
  display: flex;
  flex-direction: column;
}

.add-friend-section {
  display: flex;
  flex-direction: column;
  gap: 15px;
  margin-bottom: 30px;
}

.other-functions {
  display: flex;
  flex-direction: column;
  gap: 15px;
  margin-top: auto; /* 将按钮组推到下方 */
}

.function-item {
  width: 100%;
}

/* 响应式调整 */
@media (max-width: 768px) {
  .main-content {
    flex-direction: column;
  }
  
  .right-aside {
    width: 100%;
    border-left: none;
    border-top: 1px solid #ebeef5;
  }
}

/* 表格行过渡效果 */
.el-table .even-row {
  transition: all 0.3s ease;
}

.el-table .odd-row {
  transition: all 0.3s ease;
}
</style>

<style>
/* 全局样式 - 防止对话框抖动 */
.confirm-dialog {
  transition: all 0.3s ease !important;
  transform: translateY(0);
}

/* 防止滚动条变化 */
body {
  overflow-y: scroll;
}
</style>
<!-- src/components/FriendRequest.vue -->
<template>
  <div class="friend-requests-container">
    <!-- 顶部导航栏 -->
    <div class="header">
      <el-page-header @back="goBack" title="返回">
        <template #content>
          <div class="header-title">好友请求管理</div>
        </template>
      </el-page-header>
    </div>

    <!-- 主体内容 -->
    <div class="content">
      <div class="stats-card">
        <el-card shadow="hover">
          <div class="stat-item">
            <div class="stat-value">{{ stats.pendingCount }}</div>
            <div class="stat-label">待处理请求</div>
          </div>
          <div class="stat-item">
            <div class="stat-value">{{ stats.acceptedCount }}</div>
            <div class="stat-label">已接受</div>
          </div>
          <div class="stat-item">
            <div class="stat-value">{{ stats.rejectedCount }}</div>
            <div class="stat-label">已拒绝</div>
          </div>
        </el-card>
      </div>

      <!-- 请求列表区域 -->
      <div class="list-container">
        <el-card shadow="never" class="list-card">
          <template #header>
            <div class="card-header">
              <span>好友请求列表</span>
              <el-button type="primary" size="small" @click="refreshRequests" circle>
                <el-icon><Refresh /></el-icon>
              </el-button>
            </div>
          </template>

          <!-- 请求列表 -->
          <el-table :data="requests" style="width: 100%" v-loading="loading">
            <el-table-column prop="sender_account" label="发送者账号" width="180" />
            <el-table-column prop="sender_username" label="发送者名称" width="180" />
            <el-table-column prop="status" label="状态" width="120">
              <template #default="{ row }">
                <el-tag :type="statusTagType(row.status)" size="small">
                  {{ getStatusText(row.status) }}
                </el-tag>
              </template>
            </el-table-column>
            <el-table-column prop="created_at" label="创建时间" width="200">
              <template #default="{ row }">
                {{ formatDate(row.created_at) }}
              </template>
            </el-table-column>
            <el-table-column label="操作" width="200">
              <template #default="{ row }">
                <!-- 只有未处理的请求才显示按钮 -->
                <div v-if="row.status === 'PENDING'">
                  <el-button 
                    type="success" 
                    size="small" 
                    @click="respondToRequest(row.id, 'ACCEPTED')"
                    icon="Check"
                  >接受</el-button>
                  <el-button 
                    type="danger" 
                    size="small" 
                    @click="respondToRequest(row.id, 'REJECTED')"
                    icon="Close"
                  >拒绝</el-button>
                </div>
                <!-- 处理后显示提示文字 -->
                <div v-else style="color: #909399; font-size: 13px;">
                  已处理
                </div>
              </template>
            </el-table-column>
          </el-table>
          
          <!-- 空状态提示 -->
          <div v-if="requests.length === 0 && !loading" class="empty-state">
            <el-empty description="暂无好友请求" />
          </div>
        </el-card>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import axios from 'axios'
import { useRouter } from 'vue-router'
import { ElMessage, ElMessageBox } from 'element-plus'
import { Refresh } from '@element-plus/icons-vue'

const router = useRouter()
const requests = ref([])
const loading = ref(false)
const stats = ref({
  pendingCount: 0,
  acceptedCount: 0,
  rejectedCount: 0
})

// 获取好友请求列表
const fetchRequests = async () => {
  try {
    loading.value = true
    const token = localStorage.getItem('token')
    if (!token) {
      ElMessage.error('请先登录')
      router.push('/login')
      return
    }
    
    const res = await axios.get('http://127.0.0.1:3000/friend-requests', {
      headers: { Authorization: `Bearer ${token}` }
    })
    
    // 更新请求列表
    requests.value = res.data
    
    // 更新统计数据
    updateStats()
    
    loading.value = false
  } catch (error) {
    console.error('获取好友请求失败:', error)
    ElMessage.error('获取好友请求失败')
    loading.value = false
  }
}

// 更新统计信息
const updateStats = () => {
  stats.value = {
    pendingCount: requests.value.filter(r => r.status === 'PENDING').length,
    acceptedCount: requests.value.filter(r => r.status === 'ACCEPTED').length,
    rejectedCount: requests.value.filter(r => r.status === 'REJECTED').length
  }
}

// 处理好友请求（接受 / 拒绝）
const respondToRequest = async (requestId, status) => {
  const request = requests.value.find(r => r.id === requestId)
  if (!request) return
  
  try {
    // 确认操作
    const confirmText = status === 'ACCEPTED' 
      ? `确定要接受 ${request.sender_username || request.sender_account} 的好友请求吗？`
      : `确定要拒绝 ${request.sender_username || request.sender_account} 的好友请求吗？`
    
    await ElMessageBox.confirm(
      confirmText,
      status === 'ACCEPTED' ? '接受好友请求' : '拒绝好友请求',
      {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: status === 'ACCEPTED' ? 'success' : 'warning'
      }
    )
    
    const token = localStorage.getItem('token')
    await axios.post(
      'http://127.0.0.1:3000/friend-requests/respond',
      {
        request_id: requestId,
        status: status
      },
      {
        headers: { Authorization: `Bearer ${token}` }
      }
    )
    
    // 更新本地状态
    request.status = status
    updateStats()
    
    ElMessage.success(status === 'ACCEPTED' ? '已接受好友请求' : '已拒绝好友请求')
  } catch (error) {
    console.error('处理好友请求失败:', error)
    if (error !== 'cancel') {
      ElMessage.error('处理请求失败')
    }
  }
}

// 状态标签类型
const statusTagType = (status) => {
  switch (status) {
    case 'PENDING': return 'warning'
    case 'ACCEPTED': return 'success'
    case 'REJECTED': return 'info'
    default: return ''
  }
}

// 状态文本
const getStatusText = (status) => {
  switch (status) {
    case 'PENDING': return '待处理'
    case 'ACCEPTED': return '已接受'
    case 'REJECTED': return '已拒绝'
    default: return status
  }
}

// 格式化日期
const formatDate = (dateString) => {
  if (!dateString) return ''
  const date = new Date(dateString)
  return date.toLocaleDateString() + ' ' + date.toLocaleTimeString()
}

// 刷新请求列表
const refreshRequests = () => {
  fetchRequests()
}

// 返回上一页
const goBack = () => {
  router.go(-1)
}

// 页面加载时获取数据
onMounted(async () => {
  await fetchRequests()
})
</script>

<style scoped>
.friend-requests-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f5f7fa;
  min-height: 100vh;
}

.header {
  margin-bottom: 20px;
}

.header-title {
  font-size: 24px;
  font-weight: bold;
  color: #333;
}

.content {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.stats-card {
  margin-bottom: 20px;
}

.stat-item {
  display: inline-block;
  text-align: center;
  padding: 0 30px;
  border-right: 1px solid #eee;
}

.stat-item:last-child {
  border-right: none;
}

.stat-value {
  font-size: 28px;
  font-weight: bold;
  color: #409eff;
}

.stat-label {
  font-size: 14px;
  color: #909399;
  margin-top: 5px;
}

.list-container {
  margin-top: 20px;
}

.list-card {
  border-radius: 8px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 18px;
  font-weight: bold;
  color: #333;
}

.empty-state {
  padding: 40px 0;
  text-align: center;
}
</style>
<!-- src/components/ChatRoom.vue -->
<template>
  <div class="chat-container">
    <el-container>
      <!-- 左侧边栏 - 聊天室列表 -->
       <el-aside :width="showChatRooms ? '250px' : '60px'" class="room-list">
        <div class="room-list-header">
          <el-button 
            @click="showChatRooms = !showChatRooms"
            :icon="showChatRooms ? 'ArrowLeft' : 'ArrowRight'"
            size="small"
          />
          <h3 v-show="showChatRooms">聊天室列表</h3>
          <div v-show="showChatRooms" class="room-actions-buttons">
            <el-button type="info" size="small" @click="goToFriends">
              好友管理
            </el-button>
            <el-button type="primary" size="small" @click="showCreateRoomDialog = true">
              创建
            </el-button>
            <el-button type="success" size="small" @click="showJoinRoomDialog = true">
              加入
            </el-button>
          </div>
        </div>
        
        <el-scrollbar v-show="showChatRooms">
          <div 
            v-for="room in chatRooms" 
            :key="room.chatroom_id"
            class="room-item"
            :class="{ 'active-room': activeRoomId === room.chatroom_id }"
            @click="selectRoom(room.chatroom_id)"
          >
            <div class="room-info">
              <span class="room-id">ID: {{ room.chatroom_id }}</span>
              <span class="room-name">{{ room.name }}</span>
              <span class="room-creator">创建者: {{ room.creator_username }}</span>
            </div>
            <div class="room-actions">
              <el-button 
                v-if="activeRoomId === room.chatroom_id" 
                type="danger" 
                size="small" 
                @click.stop="leaveRoom(room.chatroom_id)"
              >
                离开
              </el-button>
            </div>
          </div>
        </el-scrollbar>
      </el-aside>

      <!-- 主内容区 - 聊天区域 -->
      <el-main class="chat-area">
        <div v-if="activeRoomId" class="chat-room-container">
          <div class="chat-header">
            <h3>{{ activeRoom?.name }}</h3>
            <span>在线用户: {{ onlineUsers.length }}</span>
          </div>
          
          <div class="message-container" ref="messageContainer">
            <div 
              v-for="message in messages" 
              :key="message.id"
              class="message-item"
              :class="{ 'my-message': message.account === currentUser.account }"
            >
              <div class="message-header">
                <span class="sender-name">{{ message.username }}</span>
                <span class="send-time">{{ formatTime(message.send_at) }}</span>
              </div>
              <div class="message-content">
                {{ message.content }}
              </div>
            </div>
          </div>
          
          <div class="message-input">
            <el-input 
              v-model="inputMessage" 
              placeholder="输入消息..." 
              @keyup.enter="sendMessage"
            >
              <template #append>
                <el-button type="primary" @click="sendMessage">
                  发送
                </el-button>
              </template>
            </el-input>
          </div>
        </div>
        
        <div v-else class="no-room-selected">
          <el-empty description="请选择一个聊天室" />
        </div>
      </el-main>

      <!-- 右侧边栏 - 在线用户列表 -->
       <el-aside :width="showOnlineUsers ? '250px' : '60px'" class="online-users">
        <div class="online-users-header">
          <el-button 
            @click="showOnlineUsers = !showOnlineUsers"
            :icon="showOnlineUsers ? 'ArrowRight' : 'ArrowLeft'"
            size="small"
          />
          <h3 v-show="showOnlineUsers">在线用户 ({{ onlineUsers.length }})</h3>
        </div>
        <el-scrollbar v-show="showOnlineUsers">
          <div 
            v-for="user in onlineUsers" 
            :key="user.account"
            class="user-item"
          >
            <div class="user-info">
              <span class="username">{{ user.username }}</span>
              <span class="user-account">({{ user.account }})</span>
            </div>
            <el-tag v-if="user.account === currentUser.account" size="small" type="success">我</el-tag>
          </div>
        </el-scrollbar>
      </el-aside>
    </el-container>

    <!-- 创建聊天室对话框 -->
    <el-dialog 
      v-model="showCreateRoomDialog" 
      title="创建聊天室" 
      width="400px"
    >
      <el-form :model="newRoomForm">
        <el-form-item label="房间名称">
          <el-input v-model="newRoomForm.name" placeholder="请输入聊天室名称" />
        </el-form-item>
      </el-form>
      <template #footer>
        <el-button @click="showCreateRoomDialog = false">取消</el-button>
        <el-button type="primary" @click="createRoom">创建</el-button>
      </template>
    </el-dialog>

    <!-- 加入聊天室对话框 -->
    <el-dialog 
      v-model="showJoinRoomDialog" 
      title="加入聊天室" 
      width="400px"
    >
      <el-form :model="joinRoomForm">
        <el-form-item label="聊天室ID">
          <el-input v-model="joinRoomForm.chatroomId" placeholder="请输入聊天室ID" />
        </el-form-item>
      </el-form>
      <template #footer>
        <el-button @click="showJoinRoomDialog = false">取消</el-button>
        <el-button type="primary" @click="joinNewRoom">加入</el-button>
      </template>
    </el-dialog>
  </div>
</template>

<script>
import axios from 'axios';
import { ElMessage } from 'element-plus';

export default {
  name: 'ChatRoom',
  data() {
    return {
      showChatRooms: true,
      showOnlineUsers: true,
      // 用户信息
      currentUser: {
        account: '',
        username: '',
        token: ''
      },
      
      // 聊天室相关数据
      chatRooms: [],          // 用户已加入的聊天室列表
      activeRoomId: null,     // 当前选中的聊天室ID
      activeRoom: null,       // 当前选中的聊天室详情
      onlineUsers: [],        // 当前聊天室在线用户列表
      messages: [],           // 当前聊天室消息记录
      inputMessage: '',       // 输入的消息内容
      
      // 创建聊天室相关
      showCreateRoomDialog: false,
      newRoomForm: {
        name: ''
      },
      
      // WebSocket相关
      socket: null,
      reconnectAttempts: 0,
      maxReconnectAttempts: 5,

      showJoinRoomDialog: false,
      joinRoomForm: {
        chatroomId: null
      }
    };
  },
  async created() {
    // 从本地存储获取用户信息
    this.currentUser.account = localStorage.getItem('account') || '';
    this.currentUser.username = localStorage.getItem('username') || '';
    this.currentUser.token = localStorage.getItem('token') || '';
    
    if (!this.currentUser.account || !this.currentUser.token) {
      ElMessage.error('用户未登录，请重新登录');
      this.$router.push('/');
      return;
    }
    
    // 获取已加入的聊天室列表
    await this.fetchJoinedChatrooms();
  },
  watch: {
    activeRoomId(newRoomId) {
      if (newRoomId) {
        // 离开之前的聊天室（仅断开WebSocket）
        this.leaveCurrentRoom();
        // 加入新的聊天室
        this.joinRoom(newRoomId);
      }
    }
  },
  methods: {
    // 跳转到好友页面
    goToFriends() {
      this.$router.push('/friends');
    },
    
    // 获取用户已加入的聊天室列表
    async fetchJoinedChatrooms() {
      try {
        const response = await axios.get('http://127.0.0.1:3000/chatrooms/joined', {
          headers: {
            Authorization: `Bearer ${this.currentUser.token}`
          }
        });
        
        this.chatRooms = response.data;
        
        // 默认选中第一个聊天室
        if (this.chatRooms.length > 0 && !this.activeRoomId) {
          this.activeRoomId = this.chatRooms[0].chatroom_id;
        }
      } catch (error) {
        ElMessage.error('获取聊天室列表失败');
        console.error('Error fetching joined chatrooms:', error);
      }
    },
    
    // 选择聊天室
    selectRoom(roomId) {
      this.activeRoomId = roomId;
      this.activeRoom = this.chatRooms.find(room => room.chatroom_id === roomId);
    },
    
    // 加入聊天室（连接WebSocket）
    async joinRoom(roomId) {
      try {
        // 加入聊天室（更新后端状态）
        await axios.post('http://127.0.0.1:3000/chatrooms/join', {
          chatroom_id: roomId
        }, {
          headers: {
            Authorization: `Bearer ${this.currentUser.token}`
          }
        });
        
        // 获取在线用户列表
        await this.fetchOnlineUsers(roomId);
        
        // 建立WebSocket连接
        this.connectWebSocket(roomId);
        
      } catch (error) {
        ElMessage.error('加入聊天室失败');
        console.error('Error joining room:', error);
      }
    },
    
    async joinNewRoom() {
      if (!this.joinRoomForm.chatroomId) {
        ElMessage.warning('请输入聊天室ID');
        return;
      }
      
      try {
        const chatroomId = Number(this.joinRoomForm.chatroomId);
        
        // 调用后端API加入聊天室
        const response = await axios.post(
          'http://127.0.0.1:3000/chatrooms/join',
          { chatroom_id: chatroomId },
          {
            headers: {
              Authorization: `Bearer ${this.currentUser.token}`
            }
          }
        );

        if (response.data.success) {
          ElMessage.success('成功加入聊天室');
          
          // 重新获取已加入的聊天室列表
          await this.fetchJoinedChatrooms();
          
          // 设置当前活跃的聊天室为新加入的聊天室
          this.activeRoomId = chatroomId;
          
          // 关闭对话框
          this.showJoinRoomDialog = false;
          this.joinRoomForm.chatroomId = null;
        } else {
          ElMessage.error(response.data.message || '加入聊天室失败');
        }
      } catch (error) {
        console.error('加入聊天室失败:', error);
        if (error.response) {
          // 根据后端返回的错误状态码显示不同提示
          if (error.response.status === 404) {
            ElMessage.error('聊天室不存在');
          } else if (error.response.status === 400) {
            ElMessage.error('您已是该聊天室成员');
          } else {
            ElMessage.error('加入聊天室失败');
          }
        } else {
          ElMessage.error('网络请求失败，请稍后再试');
        }
      }
    },

    // 连接WebSocket
    connectWebSocket(roomId) {
      // 关闭之前的连接
      if (this.socket) {
        this.socket.close();
      }
      
      const wsUrl = `ws://127.0.0.1:3000/ws/${roomId}?token=${this.currentUser.token}`;
      this.socket = new WebSocket(wsUrl);
      
      // WebSocket事件处理
      this.socket.onopen = () => {
        console.log('WebSocket connected');
        this.reconnectAttempts = 0; // 重置重连计数
      };
      
      this.socket.onmessage = (event) => {
        const message = JSON.parse(event.data);
        
        if (message.message_type === 'online_list') {
          try {
            // 更新在线用户列表
            const usernameList = JSON.parse(message.content);
            this.onlineUsers = usernameList.map(username => ({
              username,
              // 实际项目中应从API获取账号，这里简化处理
              account: username === this.currentUser.username 
                ? this.currentUser.account 
                : username // 作为占位符
            }));
          } catch (e) {
            console.error('Error parsing online list:', e);
          }
        } else {
          // 修复消息显示格式
          let content = message.content;
          
          // 尝试解析嵌套的JSON内容
          try {
            const parsed = JSON.parse(message.content);
            if (parsed.content) {
              content = parsed.content;
            }
          } catch (e) {
            // 不是JSON格式，保持原内容
          }
          
          // 添加新消息
          this.messages.push({
            id: message.id,
            account: message.account,
            username: message.username,
            content: content, // 使用处理后的内容
            send_at: new Date(message.send_at)
          });
          
          // 滚动到底部
          this.$nextTick(() => {
            const container = this.$refs.messageContainer;
            if (container) {
              container.scrollTop = container.scrollHeight;
            }
          });
        }
      };
      
      this.socket.onclose = (event) => {
        console.log('WebSocket closed', event);
        
        // 非主动断开时尝试重连
        if (event.code !== 1000 && this.reconnectAttempts < this.maxReconnectAttempts) {
          const delay = Math.min(3000, 1000 * Math.pow(2, this.reconnectAttempts));
          console.log(`Reconnecting in ${delay}ms...`);
          
          setTimeout(() => {
            this.reconnectAttempts++;
            this.connectWebSocket(roomId);
          }, delay);
        }
      };
      
      this.socket.onerror = (error) => {
        console.error('WebSocket error:', error);
      };
    },
    
    // 离开当前聊天室（仅断开WebSocket，不退出聊天室）
    leaveCurrentRoom() {
      if (this.socket) {
        this.socket.close();
        this.socket = null;
      }
      this.messages = [];
      this.onlineUsers = [];
    },
    
    // 离开聊天室（完全退出）
    async leaveRoom(roomId) {
      try {
        // 发送离开请求
        await axios.post('http://127.0.0.1:3000/chatrooms/leave', {
          chatroom_id: roomId
        }, {
          headers: {
            Authorization: `Bearer ${this.currentUser.token}`
          }
        });
        
        // 断开WebSocket
        this.leaveCurrentRoom();
        
        // 从列表中移除该聊天室
        this.chatRooms = this.chatRooms.filter(room => room.chatroom_id !== roomId);
        
        // 如果离开的是当前活跃的聊天室，选择另一个
        if (this.activeRoomId === roomId) {
          this.activeRoomId = this.chatRooms.length > 0 ? this.chatRooms[0].chatroom_id : null;
          this.activeRoom = this.activeRoomId ? this.chatRooms[0] : null;
        }
        
        ElMessage.success('已离开聊天室');
      } catch (error) {
        ElMessage.error('离开聊天室失败');
        console.error('Error leaving room:', error);
      }
    },
    
    // 创建新聊天室
    async createRoom() {
      if (!this.newRoomForm.name.trim()) {
        ElMessage.warning('请输入聊天室名称');
        return;
      }
      
      try {
        const response = await axios.post('http://127.0.0.1:3000/chatrooms/create', {
          name: this.newRoomForm.name
        }, {
          headers: {
            Authorization: `Bearer ${this.currentUser.token}`
          }
        });
        
        // 修复创建后立即显示问题
        const newRoom = {
          chatroom_id: response.data.chatroom_id,
          name: this.newRoomForm.name,
          created_by: this.currentUser.account,
          creator_username: this.currentUser.username, // 直接使用当前用户名
          created_at: new Date()
        };
        
        this.chatRooms.push(newRoom);
        
        this.showCreateRoomDialog = false;
        this.newRoomForm.name = '';
        
        // 自动加入新创建的聊天室
        this.activeRoomId = response.data.chatroom_id;
        this.activeRoom = newRoom;
        
        ElMessage.success('聊天室创建成功');
      } catch (error) {
        ElMessage.error('创建聊天室失败');
        console.error('Error creating room:', error);
      }
    },
    
    // 获取在线用户列表
    async fetchOnlineUsers(roomId) {
      try {
        const response = await axios.get(`http://127.0.0.1:3000/online-users/${roomId}`, {
          headers: {
            Authorization: `Bearer ${this.currentUser.token}`
          }
        });
        
        // 将用户名转换为用户对象数组
        this.onlineUsers = response.data.map(username => {
          return {
            username: username,
            // 实际项目中应从API获取账号，这里简化处理
            account: username === this.currentUser.username 
              ? this.currentUser.account 
              : username // 作为占位符
          };
        });
        
        // 确保当前用户始终在在线列表中
        if (!this.onlineUsers.some(u => u.account === this.currentUser.account)) {
          this.onlineUsers.push({
            username: this.currentUser.username,
            account: this.currentUser.account
          });
        }
      } catch (error) {
        console.error('Error fetching online users:', error);
      }
    },
    
    // 根据用户名获取账号（简化实现）
    getAccountByUsername(username) {
      if (!username) {
        return null;
      }
      return this.currentUser.account;
    },
    
    // 发送消息
    sendMessage() {
      if (!this.inputMessage.trim() || !this.socket || this.socket.readyState !== WebSocket.OPEN) {
        return;
      }
      
      this.socket.send(JSON.stringify({
        content: this.inputMessage
      }));
      
      this.inputMessage = '';
    },
    
    // 格式化时间
    formatTime(date) {
      if (!(date instanceof Date)) {
        date = new Date(date);
      }
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
  },
  beforeUnmount() {
    // 组件卸载前关闭WebSocket连接
    if (this.socket) {
      this.socket.close();
    }
  },
};
</script>

<style scoped>
.room-list-header, .online-users-header {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 10px 15px;
}

.room-list-header h3, .online-users-header h3 {
  margin: 0;
  flex: 1;
}

.user-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 15px;
  border-bottom: 1px solid #eee;
}

.user-info {
  display: flex;
  flex-direction: column;
}

.username {
  font-weight: bold;
}

.user-account {
  font-size: 12px;
  color: #888;
}

.chat-container {
  height: 100vh;
  display: flex;
  background-color: #f5f7fa;
}

.room-actions-buttons {
  display: flex;
  gap: 5px;
}

.room-list, .online-users {
  background-color: #fff;
  border-right: 1px solid #e6e6e6;
  height: 100vh;
  display: flex;
  flex-direction: column;
}

.room-list-header, .online-users-header {
  padding: 15px;
  border-bottom: 1px solid #e6e6e6;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #f9f9f9;
  flex-wrap: wrap;
  gap: 10px;
}

.room-item {
  padding: 12px 15px;
  border-bottom: 1px solid #eee;
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.room-item:hover {
  background-color: #f5f7fa;
}

.active-room {
  background-color: #e6f7ff;
  border-left: 3px solid #1890ff;
}

.room-info {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.room-id {
  font-size: 12px;
  color: #888;
  margin-bottom: 4px;
}

.room-name {
  display: block;
  font-weight: 500;
  margin-bottom: 4px;
}

.room-creator {
  font-size: 12px;
  color: #888;
}

.room-actions {
  margin-left: 10px;
}

.chat-area {
  flex: 1;
  display: flex;
  flex-direction: column;
  padding: 0;
  background-color: #fff;
}

.chat-room-container {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.chat-header {
  padding: 15px;
  border-bottom: 1px solid #e6e6e6;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.message-container {
  flex: 1;
  overflow-y: auto;
  padding: 20px;
}

.message-item {
  margin-bottom: 20px;
  max-width: 80%;
}

.my-message {
  margin-left: auto;
}

.message-header {
  margin-bottom: 5px;
  font-size: 12px;
}

.sender-name {
  font-weight: bold;
  margin-right: 10px;
}

.send-time {
  color: #999;
}

.message-content {
  padding: 10px 15px;
  border-radius: 4px;
  background-color: #f0f2f5;
  display: inline-block;
}

.my-message .message-content {
  background-color: #1890ff;
  color: white;
}

.message-input {
  padding: 15px;
  border-top: 1px solid #e6e6e6;
}

.no-room-selected {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
}

.user-item {
  padding: 10px 15px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.user-item:last-child {
  border-bottom: none;
}

.username {
  flex: 1;
}

.el-scrollbar {
  flex: 1;
}

.room-list-header {
  display: flex;
  flex-direction: column;
  gap: 10px;
  padding: 15px;
}

.room-list-header .el-button {
  margin-top: 5px;
}
</style>