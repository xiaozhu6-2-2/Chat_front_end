<!-- src/App.vue -->
<template>
  <div id="app">
    <router-view></router-view>
  </div>
</template>

<script>
// 导出模块，在main.js中导入
export default {
  name: 'App'
}
</script>

<style>
/* 全局样式 */
</style>

// src/main.js
import { createApp } from 'vue'
import App from './App.vue'
import router from './router'
import ElementPlus from 'element-plus'
import 'element-plus/dist/index.css'
import { ElMessage } from 'element-plus'
// 创建应用实例
const app = createApp(App)
// 注册路由和组件库
app.use(router)
app.use(ElementPlus)

// 全局错误处理
app.config.errorHandler = (err) => {
  ElMessage.error(err.message)
}

// 挂载应用实例
app.mount('#app')

<!-- src/components/LoginView.vue -->
<template>
  <div class="login-container">
    <div class="login">
      <h1>用户登录</h1>

      <el-form
        :model="form"
        status-icon
        :rules="rules"
        ref="formRef"
        label-width="100px"
        class="demo-ruleForm"
      >
        <!-- 用户名 -->
        <el-form-item label="账号" prop="account">
          <el-input v-model="form.account" ></el-input>
        </el-form-item>

        <!-- 密码 -->
        <el-form-item label="密码" prop="password">
          <el-input type="password" v-model="form.password" ></el-input>
        </el-form-item>

        <!-- 提交按钮 -->
        <el-form-item class="button-group" >
          <el-button type="primary" @click="submitForm" :loading="loading">登录</el-button>
          <el-button @click="resetForm">重置</el-button>
        </el-form-item>

        <!-- 跳转到注册页 -->
        <p class="tab-link">
          没有账号？
          <router-link to="/register">去注册</router-link>
        </p>
      </el-form>

    </div>
  </div>
</template>

<script>
// 导入axios模块用于发送HTTP请求
import axios from 'axios';
// 导入generateSecureCredentials函数用于加密敏感信息
import { generateSecureCredentials } from '@/utils/crypto';

export default {
  name: 'LoginView',
  // 数据模型
  data() {
    return {
      loading: false, // 表示登录按钮是否处于加载状态
      form: {
        account: '',
        password: ''
      }, // form存有账号密码
      rules: {
        account: [
          { required: true, message: '请输入账号', trigger: 'blur' },
          { min: 3, max: 15, message: '长度在3到15个字符之间', trigger: 'blur' }
        ],
        password: [
          { required: true, message: '请输入密码', trigger: 'blur' },
          { min: 6, message: '密码至少为6位', trigger: 'blur' }
        ]
      } // 定义了验证规则
    };
  },
  // 方法
  methods: {
    // 用户点击登录按钮处理函数
    submitForm() {
      // validate进行表单验证
      this.$refs.formRef.validate(async (valid) => {
        if (valid) {
          this.loading = true; // 登录按钮正在加载
          try {
            const credential = await generateSecureCredentials(
              this.form.account,
              this.form.password
            ); // 这是一个结构体{salt, account, password}
            const response = await axios.post(`${process.env.VUE_APP_API_BASE_URL}/login`, credential); // 向服务器发送POST请求

            if (response.status === 200) { // 状态码：200，请求成功
              const data = response.data;
              localStorage.setItem('token', data.token);
              localStorage.setItem('account', this.form.account); 
              localStorage.setItem('username', data.username);
              this.$message.success('登录成功');
              await this.$router.push('/chat');
            } else {
              this.$message.error(response.data.message || '登录失败'); // 状态码：非200，请求失败
            }
          } catch (error) {
            console.error(error);
            this.$message.error('网络请求失败，请稍后再试');
          } finally {
            this.loading = false;
          }
        } else {
          return false;
        }
      });
    },
    resetForm() {
      this.$refs.formRef.resetFields();
    }
  }
};
</script>

<style scoped>
.login-container {
  display: flex;
  justify-content: center; /* 水平居中 */
  align-items: center; /* 垂直居中 */
  min-height: 100vh; /* 设置为视口高度 */
  background-color: #f5f7fa; 
}

.login {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  max-width: 400px; /* 控制最大宽度 */
  padding: 40px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1); 
  border-radius: 8px;
  background-color: white;
}

.demo-ruleForm {
  width: 100%; /* 确保表单填满父容器 */
}

.button-group {
  justify-content: center;
  margin-top: 20px;
  margin-left: 50px;
  width: 100%
}

.tab-link {
  text-align: center; /* 注册链接居中 */
  padding: auto;
}
</style>

// src/utils/crypto.ts
// 原始密码 → 前端SHA-256哈希 → HTTPS传输 → 后端Argon2哈希 → 数据库比对
// 原始账号 → 前端公钥加密 → 后端私钥解密 → 数据库比对
import CryptoJS from 'crypto-js';
import JSEncrypt from 'jsencrypt';
import axios from 'axios';


// 获取会话公钥
export async function fetchSessionKey() {
    const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/auth/session-key`); // 调用公钥获取api
    return response.data.publicKey; // 返回公钥
}

// PBKDF2 哈希加密
export function encryptPassword(password: string, salt: string) {
    const iterations = 10000; // 哈希加密的迭代次数
    const keySize = 512 / 32; // 生成的密钥的大小

    return CryptoJS.PBKDF2(salt + password, salt, {
        keySize,
        iterations
    }).toString();
}

// RSA（非对称加密） 加密敏感数据
export async function encryptWithSessionKey(data: string, publicKey: string) {
    const encrypt = new JSEncrypt(); // 创建加密实例
    encrypt.setPublicKey(publicKey); // 设置加密公钥
    return encrypt.encrypt(data); // 对数据进行加密并返回
}

// 完整登录凭证加密流程
export async function generateSecureCredentials(
    account: string,
    password: string
) {
    // 1.获取会话公钥
    const publicKey = await fetchSessionKey();

    // 2.生成随机盐值(16位)
    const salt = CryptoJS.lib.WordArray.random(128 / 8).toString();

    // 3.加密密码
    const encryptedPassword = encryptPassword(password, salt);

    // 4.加密账户信息
    const encryptedAccount = await encryptWithSessionKey(account, publicKey);

    return {
        salt,
        encryptedAccount,
        encryptedPassword
    };
}

// jsconfig.json
{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "baseUrl": "./",
    "moduleResolution": "node",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  }
}


{
  "name": "chat_front_end",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint"
  },
  "dependencies": {
    "axios": "^1.10.0",
    "core-js": "^3.8.3",
    "crypto-js": "^4.2.0",
    "element-plus": "^2.10.3",
    "jsencrypt": "^3.3.2",
    "socket.io-client": "^4.8.1",
    "vue": "^3.2.13",
    "vue-router": "^4.0.13"
  },
  "devDependencies": {
    "@babel/core": "^7.12.16",
    "@babel/eslint-parser": "^7.12.16",
    "@types/crypto-js": "^4.2.2",
    "@vue/cli-plugin-babel": "~5.0.0",
    "@vue/cli-plugin-eslint": "~5.0.0",
    "@vue/cli-service": "~5.0.0",
    "eslint": "^7.32.0",
    "eslint-plugin-vue": "^8.0.3",
    "ts-loader": "^9.5.2",
    "typescript": "^5.8.3",
    "vue-loader": "^17.4.2"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/vue3-essential",
      "eslint:recommended"
    ],
    "parserOptions": {
      "parser": "@babel/eslint-parser"
    },
    "rules": {}
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead",
    "not ie 11"
  ]
}


// tsconfig.json
{
  "compilerOptions": {
    "target": "esnext",       // 编译目标为最新ES标准
    "module": "esnext",       // 模块系统使用ES Module
    "strict": true,           // ✅ 启用所有严格类型检查
    "jsx": "preserve",        // 保留JSX语法（Vue需要）
    "importHelpers": true,    // 减少代码冗余
    "moduleResolution": "node", // 使用Node.js模块解析策略
    "experimentalDecorators": true, // 支持装饰器语法（Vue组件需要）
    "esModuleInterop": true,  // 改善CommonJS/ES模块互操作性
    "skipLibCheck": true,     // 跳过声明文件类型检查（提升速度）
    "forceConsistentCasingInFileNames": true, // 强制文件名大小写一致
    "noEmit": true            // ✅ 只做类型检查，不输出文件（由Webpack处理）
  },
  "include": [               // ✅ 指定需要编译的文件
    "src/**/*.ts", 
    "src/**/*.tsx", 
    "src/**/*.vue"           // ✅ 关键：包含Vue单文件组件
  ],
  "exclude": ["node_modules"] // 排除依赖目录
}

// vue.config.js
const { defineConfig } = require('@vue/cli-service');

module.exports = defineConfig({
  transpileDependencies: true,
  configureWebpack: {
    resolve: {
      extensions: ['.js', '.ts', '.vue'] // ✅ 关键配置1：识别.ts扩展名
    },
    module: {
      rules: [
        {
          test: /\.ts$/,                  // 匹配所有.ts文件
          loader: 'ts-loader',             // ✅ 关键配置2：使用ts-loader处理TS
          options: {
            appendTsSuffixTo: [/\.vue$/]  // ✅ 关键配置3：让Vue单文件支持TS
          },
          exclude: /node_modules/         // 排除node_modules
        }
      ]
    }
  }
});